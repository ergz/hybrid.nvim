This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
colors/
  hybrid.lua
lua/
  hybrid/
    colors.lua
    highlights.lua
    init.lua
    utils.lua
  lualine/
    themes/
      hybrid.lua
LICENSE
README.md
stylua.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="colors/hybrid.lua">
require("hybrid").load()
</file>

<file path="lua/hybrid/init.lua">
local M = {}

M.opts = {
    terminal_colors = true,
    undercurl = true,
    underline = true,
    bold = true,
    italic = {
        strings = false,
        emphasis = true,
        comments = true,
        folds = true,
    },
    strikethrough = true,
    inverse = true,
    transparent = false,
    overrides = function(highlights, colors) end,
}

M.setup = function(opts)
    M.opts = vim.tbl_deep_extend("force", M.opts, opts or {})
end

M.load = function()
    if vim.version().minor < 8 then
        vim.notify_once("[hybrid.nvim] You should use Neovim 0.8 or higher.")
    end

    if vim.g.colors_name then
        vim.cmd.hi("clear")
    end

    vim.o.termguicolors = true
    vim.g.colors_name = "hybrid"

    local highlights = require("hybrid.highlights").setup(M.opts)

    for group, hl in pairs(highlights) do
        vim.api.nvim_set_hl(0, group, hl)
    end
end

return M
</file>

<file path="lua/hybrid/utils.lua">
local M = {}

M.bg = "#000000"
M.fg = "#ffffff"

---@param c  string
local function hexToRgb(c)
    c = string.lower(c)
    return { tonumber(c:sub(2, 3), 16), tonumber(c:sub(4, 5), 16), tonumber(c:sub(6, 7), 16) }
end

---@param foreground string foreground color
---@param background string background color
---@param alpha number|string number between 0 and 1. 0 results in bg, 1 results in fg
function M.blend(foreground, background, alpha)
    alpha = type(alpha) == "string" and (tonumber(alpha, 16) / 0xff) or alpha
    local bg = hexToRgb(background)
    local fg = hexToRgb(foreground)

    local blendChannel = function(i)
        local ret = (alpha * fg[i] + ((1 - alpha) * bg[i]))
        return math.floor(math.min(math.max(0, ret), 255) + 0.5)
    end

    return string.format("#%02x%02x%02x", blendChannel(1), blendChannel(2), blendChannel(3))
end

function M.darken(hex, amount, bg)
    return M.blend(hex, bg or M.bg, amount)
end

function M.lighten(hex, amount, fg)
    return M.blend(hex, fg or M.fg, amount)
end

return M
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 HoNamDuong

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="stylua.toml">
indent_type = "Spaces"
indent_width = 4
column_width = 120
</file>

<file path="lua/lualine/themes/hybrid.lua">
local c = require("hybrid.colors").setup()
local utils = require("hybrid.utils")

local M = {}

M.normal = {
    a = { bg = c.blue, fg = c.bg },
    b = { bg = utils.darken(c.blue, 0.2, c.line), fg = c.fg },
    c = { bg = c.line, fg = c.fg },
}

M.insert = {
    a = { bg = c.green, fg = c.bg },
    b = { bg = utils.darken(c.green, 0.2, c.line), fg = c.fg },
}

M.command = {
    a = { bg = c.yellow, fg = c.bg },
    b = { bg = utils.darken(c.yellow, 0.2, c.line), fg = c.fg },
}

M.visual = {
    a = { bg = c.magenta, fg = c.bg },
    b = { bg = utils.darken(c.magenta, 0.2, c.line), fg = c.fg },
}

M.replace = {
    a = { bg = c.red, fg = c.bg },
    b = { bg = utils.darken(c.red, 0.2, c.line), fg = c.fg },
}

M.terminal = {
    a = { bg = c.cyan, fg = c.bg },
    b = { bg = utils.darken(c.cyan, 0.2, c.line), fg = c.fg },
}

M.inactive = {
    a = { bg = c.bg, fg = c.fg },
    b = { bg = c.bg, fg = c.fg },
    c = { bg = c.bg, fg = c.fg },
}

return M
</file>

<file path="README.md">
<div align="center">

# hybrid.nvim

A dark [Neovim](https://github.com/neovim/neovim) theme written in [Lua](https://www.lua.org).

<details open>
<summary>Palette</summary>
<br>

![Palette](./palette.png)

</details>
<br>

<details open>
<summary>Screenshot</summary>
<br>

![Screenshot](./screenshot.png)

</details>
<br>

</div>

## Prerequisites

Neovim 0.8.0+

## Installing

Using `packer`

```lua
use { "HoNamDuong/hybrid.nvim" }
```

Using `lazy.nvim`

```lua
{
    "HoNamDuong/hybrid.nvim",
    lazy = false,
    priority = 1000,
    opts = {},
}
```

## Usage

Inside `init.vim`

```vim
colorscheme hybrid
```

Inside `init.lua`

```lua
vim.cmd.colorscheme("hybrid")
```

## Configuration

```lua
-- Default options:
require("hybrid").setup({
    terminal_colors = true,
    undercurl = true,
    underline = true,
    bold = true,
    italic = {
        strings = false,
        emphasis = true,
        comments = true,
        folds = true,
    },
    strikethrough = true,
    inverse = true,
    transparent = false,
    overrides = function(highlights, colors) end,
})
```

## Overrides

`config.overrides(highlights, colors)` can be used to override highlight groups.

For default values of `colors` and `highlights`, please consult [colors](./lua/hybrid/colors.lua), and [highlights](./lua/hybrid/highlights.lua).

```lua
require("hybrid").setup({
    overrides = function(hl, c)
        local background = "#1d1f21"
        hl.TelescopeNormal = {
            fg = c.fg,
            bg = background,
        }
        hl.TelescopeBorder = {
            fg = c.fg_hard,
            bg = c.bg,
        }
        hl.TelescopeTitle = {
            fg = c.fg_hard,
            bg = c.bg,
            bold = true,
        }
    end,
})
```

Please note that the override values must follow the attributes from the highlight group map, such as:

-   **fg** - foreground color
-   **bg** - background color
-   **bold** - true or false for bold font
-   **italic** - true or false for italic font

Other values can be seen in [here](<https://neovim.io/doc/user/builtin.html#synIDattr()>).

## Inspiration

-   [vim-hybrid](https://github.com/w0ng/vim-hybrid)
-   [vim-tomorrow-theme](https://github.com/chriskempson/vim-tomorrow-theme)
-   [tokyonight.nvim](https://github.com/folke/tokyonight.nvim)
-   [gruvbox.nvim](https://github.com/ellisonleao/gruvbox.nvim)
-   [kanagawa.nvim](https://github.com/rebelot/kanagawa.nvim)
</file>

<file path="lua/hybrid/colors.lua">
local utils = require("hybrid.utils")

local M = {}

-- stylua: ignore start
M.palette_old = {
    bright_black    = "#373b41",
    black           = "#17181a",
    dull_black      = "#151718",

    bright_white    = "#eaeaea",
    white           = "#c5c8c6",
    dull_white      = "#707880",

    bright_red      = "#d54e53",
    red             = "#cc6666",
    dull_red        = "#a54242",

    bright_green    = "#b9ca4a",
    green           = "#b5bd68",
    dull_green      = "#8c9440",

    bright_yellow   = "#e7c547",
    yellow          = "#f0c674",
    dull_yellow     = "#de935f",

    bright_blue     = "#7aa6da",
    blue            = "#81a2be",
    dull_blue       = "#5f819d",

    bright_magenta  = "#c397d8",
    magenta         = "#b294bb",
    dull_magenta    = "#85678f",

    bright_cyan     = "#70c0b1",
    cyan            = "#8abeb7",
    dull_cyan       = "#5e8d87",
}

M.palette = {
    bright_black    = "#4a4f55",
    black           = "#121314",
    dull_black      = "#0f1011",

    bright_white    = "#ffffff",
    white           = "#e0e0e0",
    dull_white      = "#9a9fa5",

    bright_red      = "#e05a5f",
    red             = "#d36f6f",
    dull_red        = "#b84d4d",

    bright_green    = "#c6dc57",
    green           = "#c0c96f",
    dull_green      = "#9db34b",

    bright_yellow   = "#f5d557",
    yellow          = "#f9d47f",
    dull_yellow     = "#e8a86a",

    bright_blue     = "#89b7eb",
    blue            = "#8fb7cf",
    dull_blue       = "#6a93b0",

    bright_magenta  = "#d1a3e9",
    magenta         = "#c1a1cd",
    dull_magenta    = "#93729d",

    bright_cyan     = "#7fd3c2",
    cyan            = "#97cfc8",
    dull_cyan       = "#6ba9a1",
}

-- stylua: ignore end
--

function M.setup()
    local p = M.palette

    -- stylua: ignore start
    local colors = {
        none            = "NONE",

        bg_hard         = p.dull_black,
        bg              = p.black,
        bg_soft         = p.bright_black,

        fg_soft         = p.dull_white,
        fg              = p.white,
        fg_hard         = p.bright_white,

        bright_red      = p.bright_red,
        bright_green    = p.bright_green,
        bright_yellow   = p.bright_yellow,
        bright_blue     = p.bright_blue,
        bright_magenta  = p.bright_magenta,
        bright_cyan     = p.bright_cyan,

        red             = p.red,
        green           = p.green,
        yellow          = p.yellow,
        blue            = p.blue,
        magenta         = p.magenta,
        cyan            = p.cyan,

        dull_red        = p.dull_red,
        dull_green      = p.dull_green,
        dull_yellow     = p.dull_yellow,
        dull_blue       = p.dull_blue,
        dull_magenta    = p.dull_magenta,
        dull_cyan       = p.dull_cyan,

        diff = {
            delete      = p.dull_red,
            add         = p.dull_green,
            change      = p.dull_blue,
            text        = p.dull_white,
        },

        diag = {
            error       = p.bright_red,
            warning     = p.bright_yellow,
            info        = p.bright_blue,
            hint        = p.bright_cyan,
            ok          = p.bright_green,
        },

        float = {
            bg          = p.dull_black,
            border      = p.bright_black,
            title       = p.blue,
            footer      = p.green,
        },

        line            = utils.darken(p.bright_black, 0.4, p.black),
        comment         = p.dull_white,
        selection       = p.bright_black,
        match           = p.blue,
        primary         = p.bright_blue,
    }
    -- stylua: ignore end

    return colors
end

return M
</file>

<file path="lua/hybrid/highlights.lua">
local utils = require("hybrid.utils")

local M = {}

function M.setup(opts)
    local c = require("hybrid.colors").setup()

    local highlights = {
        -- Highlight default
        -- :h highlight-default
        -- {{{
        ColorColumn = { bg = c.bg_hard },
        Conceal = { fg = c.dull_blue },
        CurSearch = { fg = c.green, bg = c.bg, reverse = opts.inverse },
        Cursor = { reverse = opts.inverse },
        -- lCursor = {},
        -- CursorIM = {},
        CursorColumn = { link = "CursorLine" },
        CursorLine = { bg = c.line },
        Directory = { fg = c.blue },
        DiffAdd = { bg = utils.darken(c.diff.add, 0.2, c.bg) },
        DiffChange = { bg = utils.darken(c.diff.change, 0.05, c.bg) },
        DiffDelete = { bg = utils.darken(c.diff.delete, 0.2, c.bg) },
        DiffText = { bg = utils.darken(c.diff.text, 0.4, utils.darken(c.diff.change, 0.2, c.bg)) },
        EndOfBuffer = { fg = c.fg_soft },
        -- TermCursor  = {},
        -- TermCursorNC= {},
        ErrorMsg = { fg = c.diag.error },
        WinSeparator = { fg = c.fg_soft, bg = opts.transparent and c.none or c.bg },
        Folded = { fg = c.fg, bg = c.line, italic = opts.italic.folds },
        FoldColumn = { fg = c.fg_soft, bg = opts.transparent and c.none or c.bg },
        SignColumn = { fg = c.fg_soft, bg = opts.transparent and c.none or c.bg },
        IncSearch = { fg = c.dull_yellow, bg = c.bg, reverse = opts.inverse },
        -- Substitute = {},
        LineNr = { fg = c.bg_soft },
        -- LineNrAbove = {},
        -- LineNrBelow = {},
        CursorLineNr = { fg = c.primary, bg = c.line },
        -- CursorLineFold = {},
        -- CursorLineSign = {},
        MatchParen = { bg = c.selection, bold = opts.bold },
        ModeMsg = { fg = c.primary },
        -- MsgArea = {},
        -- MsgSeparator = {},
        MoreMsg = { fg = c.primary },
        NonText = { fg = c.bg_soft },
        Normal = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
        NormalFloat = { fg = c.fg, bg = c.float.bg },
        FloatBorder = { fg = c.float.border, bg = c.float.bg },
        FloatTitle = { fg = c.float.title, bg = c.float.bg },
        FloatFooter = { fg = c.float.footer, bg = c.float.bg },
        NormalNC = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
        Pmenu = { fg = c.fg, bg = c.bg_hard },
        PmenuSel = { bg = c.selection, bold = opts.bold },
        -- PmenuKind = {},
        -- PmenuKindSel = {},
        -- PmenuExtra = {},
        -- PmenuExtraSel = {},
        PmenuSbar = { bg = c.bg_hard },
        PmenuThumb = { bg = c.selection },
        Question = { fg = c.primary },
        QuickFixLine = { bold = opts.bold, underline = opts.underline },
        Search = { fg = c.yellow, bg = c.bg, reverse = opts.inverse },
        -- SnippetTabstop = {},
        SpecialKey = { fg = c.primary },
        SpellBad = { sp = c.diag.error, undercurl = opts.undercurl },
        SpellCap = { sp = c.diag.warning, undercurl = opts.undercurl },
        SpellLocal = { sp = c.diag.info, undercurl = opts.undercurl },
        SpellRare = { sp = c.diag.hint, undercurl = opts.undercurl },
        StatusLine = { fg = c.fg, bg = c.line },
        StatusLineNC = { fg = c.fg, bg = c.bg },
        TabLine = { fg = c.fg, bg = c.bg_hard },
        TabLineFill = { fg = c.fg, bg = c.bg_hard },
        TabLineSel = { fg = c.fg, bg = c.bg, bold = opts.bold },
        Title = { fg = c.primary, bold = opts.bold },
        Visual = { bg = utils.lighten(c.selection, 0.8, c.primary) },
        VisualNOS = { link = "Visual" },
        WarningMsg = { fg = c.diag.warning },
        Whitespace = { link = "NonText" },
        WildMenu = { fg = c.fg, bg = c.selection, bold = opts.bold },
        WinBar = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
        WinBarNC = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
        -- }}}

        -- Syntax highlighting
        -- :h group-name
        -- {{{
        Comment = { fg = c.comment, italic = opts.italic.comments },

        Constant = { fg = c.dull_yellow },
        String = { fg = c.green, italic = opts.italic.strings },
        Character = { fg = c.green },
        -- Number = {},
        -- Boolean = {},
        -- Float = {},

        Identifier = { fg = c.fg },
        Function = { fg = c.blue },

        Statement = { fg = c.magenta },
        -- Conditional = {},
        -- Repeat = {},
        -- Label = {},
        Operator = { fg = c.blue },
        -- Keyword = {},
        -- Exception = {},

        PreProc = { fg = c.magenta },
        -- Include = {},
        -- Define = {},
        -- Macro = {},
        -- PreCondit = {},

        Type = { fg = c.bright_cyan },
        -- StorageClass = {},
        -- Structure = {},
        -- Typedef = {},

        Special = { fg = c.bright_blue },
        -- SpecialChar = {},
        -- Tag = {},
        Delimiter = { fg = c.fg },
        -- SpecialComment = {},
        Debug = { fg = c.dull_yellow },

        Underlined = { underline = opts.underline },

        Ignore = { link = "NonText" },

        Error = { fg = c.diag.error, reverse = opts.inverse },

        Todo = { fg = c.diag.hint, reverse = opts.inverse }, -- TODO FIXME XXX

        Added = { fg = c.diff.add },
        Changed = { fg = c.diff.change },
        Removed = { fg = c.diff.delete },
        -- }}}

        -- Treesitter
        -- :h treesitter-highlight
        -- Source https://github.com/nvim-treesitter/nvim-treesitter/blob/master/CONTRIBUTING.md#highlights
        -- {{{
        -- -- Identifiers
        -- @variable                    ; various variable names
        -- @variable.builtin            ; built-in variable names (e.g. `this`)
        -- @variable.parameter          ; parameters of a function
        -- @variable.parameter.builtin  ; special parameters (e.g. `_`, `it`)
        -- @variable.member             ; object and struct fields

        -- @constant          ; constant identifiers
        -- @constant.builtin  ; built-in constant values
        -- @constant.macro    ; constants defined by the preprocessor

        -- @module            ; modules or namespaces
        -- @module.builtin    ; built-in modules or namespaces
        -- @label             ; GOTO and other labels (e.g. `label:` in C), including heredoc labels

        ["@variable"] = { fg = c.fg },
        ["@variable.builtin"] = { fg = c.red },
        ["@variable.parameter"] = { fg = c.yellow },
        ["@variable.member"] = { fg = c.cyan },

        ["@module.builtin"] = { fg = c.red },

        -- -- Literals
        -- @string                 ; string literals
        -- @string.documentation   ; string documenting code (e.g. Python docstrings)
        -- @string.regexp          ; regular expressions
        -- @string.escape          ; escape sequences
        -- @string.special         ; other special strings (e.g. dates)
        -- @string.special.symbol  ; symbols or atoms
        -- @string.special.url     ; URIs (e.g. hyperlinks)
        -- @string.special.path    ; filenames

        -- @character              ; character literals
        -- @character.special      ; special characters (e.g. wildcards)

        -- @boolean                ; boolean literals
        -- @number                 ; numeric literals
        -- @number.float           ; floating-point number literals

        ["@string.regexp"] = { fg = c.cyan },
        ["@string.escape"] = { fg = c.magenta },
        ["@string.special.url"] = { underline = opts.underline },

        -- -- Types
        -- @type             ; type or class definitions and annotations
        -- @type.builtin     ; built-in types
        -- @type.definition  ; identifiers in type definitions (e.g. `typedef <type> <identifier>` in C)

        -- @attribute          ; attribute annotations (e.g. Python decorators, Rust lifetimes)
        -- @attribute.builtin  ; builtin annotations (e.g. `@property` in Python)
        -- @property           ; the key in key/value pairs

        ["@property"] = { fg = c.cyan },

        -- -- Functions
        -- @function             ; function definitions
        -- @function.builtin     ; built-in functions
        -- @function.call        ; function calls
        -- @function.macro       ; preprocessor macros

        -- @function.method      ; method definitions
        -- @function.method.call ; method calls

        -- @constructor          ; constructor calls and definitions
        -- @operator             ; symbolic operators (e.g. `+` / `*`)

        ["@function.builtin"] = { fg = c.red },

        ["@constructor"] = { fg = c.magenta },

        -- -- Keywords
        -- @keyword                   ; keywords not fitting into specific categories
        -- @keyword.coroutine         ; keywords related to coroutines (e.g. `go` in Go, `async/await` in Python)
        -- @keyword.function          ; keywords that define a function (e.g. `func` in Go, `def` in Python)
        -- @keyword.operator          ; operators that are English words (e.g. `and` / `or`)
        -- @keyword.import            ; keywords for including or exporting modules (e.g. `import` / `from` in Python)
        -- @keyword.type              ; keywords describing namespaces and composite types (e.g. `struct`, `enum`)
        -- @keyword.modifier          ; keywords modifying other constructs (e.g. `const`, `static`, `public`)
        -- @keyword.repeat            ; keywords related to loops (e.g. `for` / `while`)
        -- @keyword.return            ; keywords like `return` and `yield`
        -- @keyword.debug             ; keywords related to debugging
        -- @keyword.exception         ; keywords related to exceptions (e.g. `throw` / `catch`)

        -- @keyword.conditional         ; keywords related to conditionals (e.g. `if` / `else`)
        -- @keyword.conditional.ternary ; ternary operator (e.g. `?` / `:`)

        -- @keyword.directive         ; various preprocessor directives & shebangs
        -- @keyword.directive.define  ; preprocessor definition directives

        ["@keyword.operator"] = { link = "@operator" },

        -- -- Punctuation
        -- @punctuation.delimiter ; delimiters (e.g. `;` / `.` / `,`)
        -- @punctuation.bracket   ; brackets (e.g. `()` / `{}` / `[]`)
        -- @punctuation.special   ; special symbols (e.g. `{}` in string interpolation)

        ["@punctuation.special"] = { link = "Special" },

        -- -- Comments
        -- @comment               ; line and block comments
        -- @comment.documentation ; comments documenting code

        -- @comment.error         ; error-type comments (e.g. `ERROR`, `FIXME`, `DEPRECATED`)
        -- @comment.warning       ; warning-type comments (e.g. `WARNING`, `FIX`, `HACK`)
        -- @comment.todo          ; todo-type comments (e.g. `TODO`, `WIP`)
        -- @comment.note          ; note-type comments (e.g. `NOTE`, `INFO`, `XXX`)

        ["@comment.error"] = { fg = c.diag.error, reverse = opts.inverse },
        ["@comment.warning"] = { fg = c.diag.warning, reverse = opts.inverse },
        ["@comment.todo"] = { fg = c.diag.hint, reverse = opts.inverse },
        ["@comment.note"] = { fg = c.diag.info, reverse = opts.inverse },

        -- -- Markup
        -- Mainly for markup languages
        -- @markup.strong         ; bold text
        -- @markup.italic         ; italic text
        -- @markup.strikethrough  ; struck-through text
        -- @markup.underline      ; underlined text (only for literal underline markup!)

        -- @markup.heading        ; headings, titles (including markers)
        -- @markup.heading.1      ; top-level heading
        -- @markup.heading.2      ; section heading
        -- @markup.heading.3      ; subsection heading
        -- @markup.heading.4      ; and so on
        -- @markup.heading.5      ; and so forth
        -- @markup.heading.6      ; six levels ought to be enough for anybody

        -- @markup.quote          ; block quotes
        -- @markup.math           ; math environments (e.g. `$ ... $` in LaTeX)

        -- @markup.link           ; text references, footnotes, citations, etc.
        -- @markup.link.label     ; link, reference descriptions
        -- @markup.link.url       ; URL-style links

        -- @markup.raw            ; literal or verbatim text (e.g. inline code)
        -- @markup.raw.block      ; literal or verbatim text as a stand-alone block
        --                        ; (use priority 90 for blocks with injections)

        -- @markup.list           ; list markers
        -- @markup.list.checked   ; checked todo-style list markers
        -- @markup.list.unchecked ; unchecked todo-style list markers

        -- @diff.plus       ; added text (for diff files)
        -- @diff.minus      ; deleted text (for diff files)
        -- @diff.delta      ; changed text (for diff files)

        -- @tag           ; XML-style tag names (and similar)
        -- @tag.builtin   ; builtin tag names (e.g. HTML5 tags)
        -- @tag.attribute ; XML-style tag attributes
        -- @tag.delimiter ; XML-style tag delimiters

        ["@markup.strong"] = { bold = opts.bold },
        ["@markup.italic"] = { italic = opts.italic.emphasis },
        ["@markup.strikethrough"] = { strikethrough = opts.strikethrough },
        ["@markup.underline"] = { underline = opts.underline },

        ["@markup.heading"] = { link = "Title", bold = opts.bold },
        ["@markup.heading.1"] = { fg = c.bright_yellow, bold = opts.bold },
        ["@markup.heading.2"] = { fg = c.bright_green, bold = opts.bold },
        ["@markup.heading.3"] = { fg = c.bright_cyan, bold = opts.bold },
        ["@markup.heading.4"] = { fg = c.yellow },
        ["@markup.heading.5"] = { fg = c.green },
        ["@markup.heading.6"] = { fg = c.cyan },

        ["@markup.quote"] = { fg = c.blue },
        ["@markup.math"] = { fg = c.magenta },

        ["@markup.list"] = { fg = c.blue },
        ["@markup.list.checked"] = { fg = c.green },
        ["@markup.list.unchecked"] = { fg = c.blue },

        ["@markup.link"] = { fg = c.magenta },
        ["@markup.link.label"] = { fg = c.bright_blue },
        ["@markup.link.url"] = { fg = c.cyan, underline = opts.underline },

        ["@markup.raw"] = { bg = c.line },
        ["@markup.raw.block"] = { bg = c.line, fg = c.green },

        ["@tag"] = { link = "Label" },
        ["@tag.attribute"] = { link = "@property" },
        ["@tag.delimiter"] = { link = "Delimiter" },

        -- -- Non-highlighting captures
        -- @none    ; completely disable the highlight
        -- @conceal ; captures that are only meant to be concealed

        -- @spell   ; for defining regions to be spellchecked
        -- @nospell ; for defining regions that should NOT be spellchecked

        ["@conceal"] = { fg = c.fg_soft },
        -- }}}

        -- Diagnostics
        -- :h diagnostic-highlights
        DiagnosticError = { fg = c.diag.error },
        DiagnosticWarn = { fg = c.diag.warning },
        DiagnosticInfo = { fg = c.diag.info },
        DiagnosticHint = { fg = c.diag.hint },
        DiagnosticOk = { fg = c.diag.ok },

        DiagnosticVirtualTextError = { bg = utils.darken(c.diag.error, 0.1, c.bg), fg = c.diag.error },
        DiagnosticVirtualTextWarn = { bg = utils.darken(c.diag.warning, 0.1, c.bg), fg = c.diag.warning },
        DiagnosticVirtualTextInfo = { bg = utils.darken(c.diag.info, 0.1, c.bg), fg = c.diag.info },
        DiagnosticVirtualTextHint = { bg = utils.darken(c.diag.hint, 0.1, c.bg), fg = c.diag.hint },
        DiagnosticVirtualTextOk = { bg = utils.darken(c.diag.ok, 0.1, c.bg), fg = c.diag.hint },

        DiagnosticUnderlineError = { undercurl = opts.undercurl, sp = c.diag.error },
        DiagnosticUnderlineWarn = { undercurl = opts.undercurl, sp = c.diag.warning },
        DiagnosticUnderlineInfo = { undercurl = opts.undercurl, sp = c.diag.info },
        DiagnosticUnderlineHint = { undercurl = opts.undercurl, sp = c.diag.hint },
        DiagnosticUnderlineOk = { undercurl = opts.undercurl, sp = c.diag.ok },

        -- DiagnosticDeprecated = {},
        -- DiagnosticUnnecessary = {},

        -- NeoVim
        healthError = { link = "DiagnosticError" },
        healthSuccess = { link = "DiagnosticOk" },
        healthWarning = { link = "DiagnosticWarn" },

        -- diff
        diffAdded = { fg = c.diff.add },
        diffRemoved = { fg = c.diff.delete },
        diffChanged = { fg = c.diff.change },
        diffOldFile = { fg = c.yellow },
        diffNewFile = { fg = c.dull_yellow },
        diffFile = { fg = c.blue },
        diffLine = { fg = c.comment },
        diffIndexLine = { fg = c.magenta },

        -- LSP highlight
        -- :h lsp-highlight
        LspReferenceText = { bg = c.selection },
        LspReferenceRead = { bg = c.selection, bold = opts.bold },
        LspReferenceWrite = { bg = c.selection, bold = opts.bold, underline = opts.underline },
        -- LspInlayHint = {},
        -- LspCodeLens = {},
        -- LspCodeLensSeparator = {},
        LspSignatureActiveParameter = { link = "Visual" },

        -- -- LSP Semantic Token
        -- :h lsp-semantic-highlight
        -- {{{
        -- for the type
        -- ["@lsp.type.class"] = {},
        ["@lsp.type.comment"] = {}, -- use treesitter styles
        -- ["@lsp.type.decorator"] = {},
        -- ["@lsp.type.enum"] = {},
        -- ["@lsp.type.enumMember"] = {},
        -- ["@lsp.type.event"] = {},
        ["@lsp.type.function"] = { link = "@function" },
        -- ["@lsp.type.interface"] = {},
        ["@lsp.type.keyword"] = { link = "@keyword" },
        ["@lsp.type.macro"] = { link = "@function.macro" },
        ["@lsp.type.method"] = { link = "@function.method" },
        -- ["@lsp.type.modifier"] = {},
        ["@lsp.type.namespace"] = { link = "@module" },
        ["@lsp.type.number"] = { link = "@number" },
        ["@lsp.type.operator"] = { link = "@operator" },
        ["@lsp.type.parameter"] = { link = "@variable.parameter" },
        ["@lsp.type.property"] = { link = "@property" },
        -- ["@lsp.type.regexp"] = {},
        ["@lsp.type.string"] = { link = "@string" },
        -- ["@lsp.type.struct"] = {},
        ["@lsp.type.type"] = { link = "@type" },
        ["@lsp.type.typeParameter"] = {},
        ["@lsp.type.variable"] = {}, -- use treesitter styles

        -- for each modifier
        ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
        ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
        -- }}}

        -- WhichKey
        -- :h which-key.nvim-which-key-colors
        WhichKey = { fg = c.primary },
        -- WhichKeyBorder = {},
        WhichKeyDesc = { fg = c.fg },
        WhichKeyGroup = { fg = c.green },

        WhichKeyIcon = { fg = c.fg },
        WhichKeyIconAzure = { fg = c.bright_blue },
        WhichKeyIconBlue = { fg = c.blue },
        WhichKeyIconCyan = { fg = c.cyan },
        WhichKeyIconGreen = { fg = c.green },
        WhichKeyIconGrey = { fg = c.fg_soft },
        WhichKeyIconOrange = { fg = c.dull_yellow },
        WhichKeyIconPurple = { fg = c.magenta },
        WhichKeyIconRed = { fg = c.red },
        WhichKeyIconYellow = { fg = c.yellow },

        -- WhichKeyNormal = {},
        -- WhichKeySeparator = {},
        -- WhichKeyTitle = {},
        -- WhichKeyValue = {},

        -- GitSigns
        -- :h gitsigns-highlight-groups
        GitSignsAdd = { fg = c.diff.add },
        GitSignsChange = { fg = c.diff.change },
        GitSignsDelete = { fg = c.diff.delete },
        -- GitSignsChangedelete = {},
        -- GitSignsTopdelete = {},
        -- GitSignsUntracked = {},

        -- Telescope
        TelescopeNormal = { fg = c.fg, bg = c.float.bg },
        TelescopeBorder = { fg = c.float.border, bg = c.float.bg },
        TelescopeTitle = { fg = c.float.title, bg = c.float.bg },
        TelescopeMatching = { fg = c.match, bold = opts.bold },

        -- NvimTree
        -- :h *nvim-tree-highlight-default
        -- {{{
        -- File Text:
        NvimTreeExecFile = { fg = c.green, bold = opts.bold },
        NvimTreeImageFile = { fg = c.magenta },
        NvimTreeSpecialFile = { fg = c.yellow, underline = opts.underline },
        NvimTreeSymlink = { fg = c.cyan },
        -- Folder Text:
        NvimTreeRootFolder = { fg = c.blue, bold = opts.bold },
        -- Indent:
        NvimTreeIndentMarker = { fg = c.fg_soft },
        -- Picker:
        NvimTreeWindowPicker = { fg = c.primary, bg = c.line, bold = opts.bold },
        -- Git Icon:
        NvimTreeGitDeletedIcon = { fg = c.diff.delete },
        NvimTreeGitDirtyIcon = { fg = c.diff.change },
        NvimTreeGitIgnoredIcon = { fg = c.comment },
        NvimTreeGitMergeIcon = { fg = c.dull_yellow },
        NvimTreeGitNewIcon = { fg = c.diff.add },
        NvimTreeGitRenamedIcon = { fg = c.diff.change },
        NvimTreeGitStagedIcon = { fg = c.diff.add },
        -- }}}

        -- BufferLine
        BufferLineIndicatorSelected = { fg = c.primary },
        BufferLineOffsetSeparator = { link = "WinSeparator" },

        -- Cmp
        -- :h cmp-highlight
        CmpItemAbbr = { fg = c.fg, bg = c.none },
        CmpItemAbbrDeprecated = { fg = c.fg_soft, bg = c.none, strikethrough = opts.strikethrough },
        CmpItemAbbrMatch = { fg = c.match, bold = opts.bold },
        CmpItemAbbrMatchFuzzy = { sp = c.match, undercurl = opts.undercurl },
        CmpItemMenu = { fg = c.fg_soft, bg = c.none },

        -- Navic
        -- :h navic-highlights
        NavicSeparator = { fg = c.fg_soft },
        NavicText = { fg = c.fg },

        -- nvim-dap-ui
        -- source https://github.com/rcarriga/nvim-dap-ui/blob/master/lua/dapui/config/highlights.lua
        debugPC = { bg = utils.darken(c.yellow, 0.1, c.bg) },
        debugBreakpoint = { fg = c.blue, bg = utils.darken(c.blue, 0.1, c.bg) },
        DapUINormal = { link = "Normal" },
        DapUIVariable = { link = "Normal" },
        DapUIScope = { fg = c.cyan },
        DapUIType = { fg = c.magenta },
        DapUIValue = { link = "Normal" },
        DapUIModifiedValue = { fg = c.cyan, bold = opts.bold },
        DapUIDecoration = { fg = c.cyan },
        DapUIThread = { fg = c.green },
        DapUIStoppedThread = { fg = c.cyan },
        DapUIFrameName = { link = "Normal" },
        DapUISource = { fg = c.magenta },
        DapUILineNumber = { fg = c.cyan },
        DapUIFloatNormal = { link = "NormalFloat" },
        DapUIFloatBorder = { fg = c.cyan },
        DapUIWatchesEmpty = { fg = c.red },
        DapUIWatchesValue = { fg = c.green },
        DapUIWatchesError = { fg = c.red },
        DapUIBreakpointsPath = { fg = c.cyan },
        DapUIBreakpointsInfo = { fg = c.green },
        DapUIBreakpointsCurrentLine = { fg = c.green, bold = opts.bold },
        DapUIBreakpointsLine = { link = "DapUILineNumber" },
        DapUIBreakpointsDisabledLine = { fg = c.fg_soft },
        DapUICurrentFrameName = { link = "DapUIBreakpointsCurrentLine" },
        DapUIStepOver = { fg = c.cyan },
        DapUIStepInto = { fg = c.cyan },
        DapUIStepBack = { fg = c.cyan },
        DapUIStepOut = { fg = c.cyan },
        DapUIStop = { fg = c.red },
        DapUIPlayPause = { fg = c.green },
        DapUIRestart = { fg = c.green },
        DapUIUnavailable = { fg = c.fg_soft },
        DapUIWinSelect = { fg = c.cyan, bold = opts.bold },
        DapUIEndofBuffer = { link = "EndofBuffer" },
    }

    -- Cmp and Navic
    -- :h navic-highlights
    -- :h cmp-highlight
    -- {{{
    -- stylua: ignore start
    local kinds = {
        Array           = "@punctuation.bracket",
        Boolean         = "@boolean",
        Class           = "@type",
        Color           = "Special",
        Constant        = "@constant",
        Constructor     = "@constructor",
        Enum            = "Structure",
        EnumMember      = "@constant",
        Event           = "Special",
        Field           = "@variable.member",
        File            = "@variable",
        Folder          = "Directory",
        Function        = "@function",
        Interface       = "Structure",
        Key             = "@variable.member",
        Keyword         = "@keyword",
        Method          = "@function.method",
        Module          = "@module",
        Namespace       = "@module",
        Null            = "@constant.builtin",
        Number          = "@number",
        Object          = "@constant",
        Operator        = "@operator",
        Package         = "@module",
        Property        = "@property",
        Reference       = "@markup.link",
        Snippet         = "Conceal",
        String          = "@string",
        Struct          = "Structure",
        Text            = "@comment",
        TypeParameter   = "TypeDef",
        Unit            = "Structure",
        Value           = "@string",
        Variable        = "@variable",
    }
    -- stylua: ignore end

    local kind_groups = { "NavicIcons%s", "CmpItemKind%s" }

    for kind, link in pairs(kinds) do
        for _, plugin in pairs(kind_groups) do
            highlights[plugin:format(kind)] = { link = link }
        end
    end
    -- }}}

    -- Terminal
    if opts.terminal_colors then
        -- stylua: ignore start
        local term_colors = {
            c.bg,               -- color0     Black
            c.red,              -- color1     Red
            c.green,            -- color2     Green
            c.yellow,           -- color3     Yellow
            c.blue,             -- color4     Blue
            c.magenta,          -- color5     Magenta
            c.cyan,             -- color6     Cyan
            c.fg,               -- color7     White

            c.bg_soft,          -- color8     BrightBlack
            c.bright_red,       -- color9     BrightRed
            c.bright_green,     -- color10    BrightGreen
            c.bright_yellow,    -- color11    BrightYellow
            c.bright_blue,      -- color12    BrightBlue
            c.bright_magenta,   -- color13    BrightMagenta
            c.bright_cyan,      -- color14    BrightCyan
            c.fg_hard,          -- color15    BrightWhite
        }
        -- stylua: ignore end

        for index, value in ipairs(term_colors) do
            vim.g["terminal_color_" .. index - 1] = value
        end
    end

    -- Override specific highlights
    opts.overrides(highlights, c)

    return highlights
end

return M
</file>

</files>
